<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <%_ let autoIncrementValue = true;
    if(pkData.length > 1 || pkName !== 'id') {
        autoIncrementValue = false;
    } else {
        for (idx in relationships) {
            if (relationships[idx].useJPADerivedIdentifier === true) {
                autoIncrementValue = false;
                break;
            }
        }
    }
    _%>
    <!--
        Added the entity <%= entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>-1" author="jhipster">
        <%_ if (typeof javadoc == 'undefined') { _%>
        <createTable tableName="<%= entityTableName %>">
        <%_ } else { _%>
        <createTable tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
        <%_ } _%>
<%_
function fieldToColumnType(field) {
    let maxlength = 255;
    if (field.fieldValidate === true && field.fieldValidateRules.includes('maxlength')) {
        maxlength = field.fieldValidateRulesMaxlength;
    }
    const fieldType = field.fieldType;
    const fieldTypeBlobContent = field.fieldTypeBlobContent;
    let columnType;
    if (fieldType === 'String' || field.fieldIsEnum) {
        columnType="varchar(" + maxlength + ")";
    } else if (fieldType === 'Integer') {
        columnType="integer";
    } else if (fieldType === 'Long') {
        columnType="bigint";
    } else if (fieldType === 'Float') {
        columnType="${floatType}";
    } else if (fieldType === 'Double') {
        columnType="double";
    } else if (fieldType === 'BigDecimal') {
        columnType="decimal(21,2)";
    } else if (fieldType === 'LocalDate') {
        columnType="date";
    } else if (fieldType === 'Instant') {
        columnType="datetime";
    } else if (fieldType === 'ZonedDateTime') {
        columnType="datetime";
    } else if (fieldType === 'Duration') {
        columnType="bigint";
    } else if (fieldType === 'UUID') {
        columnType="${uuidType}";
    } else if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
        if (prodDatabaseType === 'mysql' || prodDatabaseType === 'postgresql' || prodDatabaseType === 'mariadb') {
            columnType="longblob";
        } else {
            columnType="blob";
        }
    } else if (fieldTypeBlobContent === 'text') {
        columnType="${clobType}";
    } else if (fieldType === 'Boolean') {
        columnType="boolean";
    }
    field.columnType = columnType;
    return columnType;
}
_%>
        <%_ for (idx in fields) {
            let nullable = true;
            if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('required')) {
                nullable = false;
            }
            let unique = false;
            if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('unique')) {
                unique = true;
            }
            const columnName = fields[idx].fieldNameAsDatabaseColumn;
            let columnType = fieldToColumnType(fields[idx]);
        _%>
            <column name="<%= columnName %>" type="<%=columnType %>"<% if (autoIncrementValue && columnName === 'id' && (prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb' || prodDatabaseType === 'postgresql' )) { %> autoIncrement="true"<% } %><% if (typeof fields[idx].javadoc !== 'undefined') { %> remarks="<%- formatAsLiquibaseRemarks(fields[idx].javadoc) %>"<% } %>>
                <constraints<%_ if(fields[idx].partOfId) { %> primaryKey="true"<%_ } %> nullable="<%= nullable %>"<%_ if (unique) { _%> unique="true" uniqueConstraintName="<%= getUXConstraintName(entityTableName, columnName, prodDatabaseType) %>"<%_ } _%>/>
            </column>
            <%_ if (fields[idx].fieldType === 'byte[]' && fields[idx].fieldTypeBlobContent !== 'text') {
                let contentTypeColumnType = "varchar(255)"; _%>
            <column name="<%=columnName %>_content_type" type="<%=contentTypeColumnType%>">
                <constraints nullable="<%= nullable %>"/>
            </column>
            <%_ } _%>
        <%_ } _%>
            <%_ for (idx in relationships) {
                let nullable_relation = true,
                relationshipType = relationships[idx].relationshipType,
                relationshipName = relationships[idx].relationshipName;
                relationships[idx].pkData.forEach(pk => {
                    const columnType = fieldToColumnType(pk.field);
                    relationshipColumnType = relationships[idx].otherEntityName === 'user' && authenticationType === 'oauth2' ? 'varchar(100)' : columnType;
                    if (relationships[idx].relationshipValidate === true && relationships[idx].relationshipRequired) {
                        nullable_relation = false;
                    }
                    if (relationships[idx].relationshipType === 'many-to-one') { _%>
            <column name="<%=getColumnName(relationshipName + pk.nameCapitalized) %>" type="<%= relationshipColumnType %>">
                <constraints<%_ if(relationships[idx].partOfId) { %> primaryKey="true"<%_ } %> nullable="<%= nullable_relation %>"/>
            </column>
                    <%_ } else if (relationshipType === 'one-to-one' && relationships[idx].ownerSide === true
                                    && (relationships[idx].useJPADerivedIdentifier == null || relationships[idx].useJPADerivedIdentifier === false)) {
                        const uniqueConstraintName = getUXConstraintName(entityTableName, getColumnName(relationshipName + pk.nameCapitalized), prodDatabaseType);
                    _%>
            <column name="<%=getColumnName(relationshipName + pk.nameCapitalized) %>" type="<%= relationshipColumnType %>">
                <constraints<%_ if(relationships[idx].partOfId) { %> primaryKey="true"<%_ } %> unique="true" nullable="<%= nullable_relation %>" uniqueConstraintName="<%= uniqueConstraintName %>"/>
            </column>
                    <%_ } _%>
                <%_ }); _%>
            <%_ } _%>
            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
        </createTable>
        <%_ for (const idx in fields) {
            if (fields[idx].fieldType === 'ZonedDateTime' || fields[idx].fieldType === 'Instant') { _%>
        <dropDefaultValue tableName="<%= entityTableName %>" columnName="<%=fields[idx].fieldNameAsDatabaseColumn %>" columnDataType="datetime"/>
        <%_ }
        } _%>
    </changeSet>

    <changeSet id="<%= changelogDate %>-1-relations" author="jhipster">
        <%_ for (idx in relationships) {
            const relationshipType = relationships[idx].relationshipType,
            relationshipName = relationships[idx].relationshipName,
            ownerSide = relationships[idx].ownerSide,
            otherEntityName = relationships[idx].otherEntityName;
            if (relationshipType === 'many-to-many' && ownerSide) {
                const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
                const joinedPkData = [
                    ...pkData.map( pk => ({name: name + pk.nameCapitalized, field: pk.field})),
                    ...relationships[idx].pkData.map( pk => ({name: relationshipName + pk.nameCapitalized, field: pk.field}))
                ];
          _%>

        <createTable tableName="<%= joinTableName %>">
            <%_ joinedPkData.forEach(pk => { _%>
            <column name="<%= getColumnName(pk.name) %>" type="<%= fieldToColumnType(pk.field)%>">
                <constraints nullable="false"/>
            </column>
            <%_ }); _%>
        </createTable>

        <addPrimaryKey columnNames="<%= joinedPkData.map(pk => getColumnName(pk.name)).join(', ') %>" tableName="<%= joinTableName %>"/>
        <%_ } _%><%_ } _%>
    </changeSet>
    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here, do not remove-->

    <!--
        Load sample data generated with Faker.js
        - This data can be easily edited using a CSV editor (or even MS Excel) and
          is located in the 'src/main/resources/config/liquibase/data' directory
        - By default this data is applied when running with the JHipster 'dev' profile.
          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'
          Spring Boot configuration key.
    -->
    <changeSet id="<%= changelogDate %>-1-data" author="jhipster" context="faker">
        <loadData
            file="config/liquibase/fake-data/<%= entityTableName %>.csv"
            separator=";"
            tableName="<%= entityTableName %>">
<%_
// define function here in the middle for easier git merge...
function fieldToLoadColumnType(field) {
    // columnType was set after calling the function above
    let columnType = field.columnType;
    let loadColumnType = 'string';
    if (columnType === 'integer' || columnType === 'bigint' || columnType === 'double' || columnType === 'decimal(21,2)' || columnType === '${floatType}') {
        loadColumnType = 'numeric';
    } else if (columnType === 'date') {
        loadColumnType = 'date';
    } else if (columnType === 'datetime') {
        loadColumnType = 'datetime';
    } else if (columnType === 'boolean') {
        loadColumnType = 'boolean';
    } else if (field.fieldIsEnum) {
        loadColumnType = 'string';
    } else if (columnType === 'blob' || columnType === 'longblob') {
        loadColumnType = 'blob';
    } else if (columnType === '${clobType}') {
        loadColumnType = 'clob';
    }  else if (columnType === '${uuidType}' && prodDatabaseType !== 'mysql' && prodDatabaseType !== 'mariadb') {
        loadColumnType = '${uuidType}';
    }
    field.loadColumnType = loadColumnType;
    return loadColumnType;
}
_%>
_%>
            <%_ for (idx in fields) {
                let loadColumnType = fieldToLoadColumnType(fields[idx]);
                _%>
            <column name="<%=fields[idx].fieldNameAsDatabaseColumn%>" type="<%=loadColumnType%>"/>
                <%_ if (fields[idx].fieldType === 'byte[]' && fields[idx].fieldTypeBlobContent !== 'text') { _%>
            <column name="<%=fields[idx].fieldNameAsDatabaseColumn%>_content_type" type="string"/>
                <%_ } _%>
            <%_ } _%>
            <%_ for (idx in relationships) {
                let loadColumnType = 'numeric';
                if (relationships[idx].relationshipValidate === true && relationships[idx].relationshipRequired
                        && (relationships[idx].relationshipType === "many-to-one"
                            || (relationships[idx].relationshipType === "one-to-one" && relationships[idx].ownerSide === true
                                && (relationships[idx].useJPADerivedIdentifier == null || relationships[idx].useJPADerivedIdentifier === false))
                    )) {
                    relationships[idx].pkData.forEach(pk => {
                        let baseColumnName = getColumnName(relationships[idx].relationshipName + pk.nameCapitalized);
                        if (relationships[idx].otherEntityNameCapitalized === 'User' && authenticationType === 'oauth2') {
                            loadColumnType = 'string';
                        } else {
                            loadColumnType = fieldToLoadColumnType(pk.field);
                        }_%>
            <column name="<%=baseColumnName%>" type="<%=loadColumnType%>"/>
                    <%_ }); _%>
                <%_ } _%>
            <%_  } _%>
            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here, do not remove-->
        </loadData>
    </changeSet>

</databaseChangeLog>
