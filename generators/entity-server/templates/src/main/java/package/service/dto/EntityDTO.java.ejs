<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service.dto;

<%_
let importApiModelProperty = false;
let importJsonIgnore = false;
let importJsonIgnoreProperties = false;
let importSet = false;
const uniqueEnums = {};
const primaryKeyType = pkType;
_%>
<%- include ../../domain/imports -%>
<%_ if (typeof javadoc != 'undefined') { _%>
import io.swagger.annotations.ApiModel;
<%_ } if (importApiModelProperty === true) { _%>
import io.swagger.annotations.ApiModelProperty;
<%_ } _%>
<%_ if (fieldsContainInstant) { _%>
import java.time.Instant;
<%_ } _%>
<%_ if (fieldsContainLocalDate) { _%>
import java.time.LocalDate;
<%_ } _%>
<%_ if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime;
<%_ } _%>
<%_ if (fieldsContainDuration) { _%>
import java.time.Duration;
<%_ } _%>
<%_ if (validation) { _%>
import javax.validation.constraints.*;
<%_ } _%>
import java.io.Serializable;
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal;
<%_ } _%>
<%_ if (fieldsContainBlob && databaseType === 'cassandra') { _%>
import java.nio.ByteBuffer;
<%_ } _%>
<%_ if (fieldsContainOwnerManyToMany || fieldsContainEmbedded) { _%>
import java.util.HashSet;
import java.util.Set;
<%_ } _%>
import java.util.Objects;
<%_ if (databaseType === 'cassandra' || fieldsContainUUID === true) { _%>
import java.util.UUID;
<%_ } _%>
<%_ if (fieldsContainBlob && databaseType === 'sql') { _%>
import javax.persistence.Lob;
<%_ } _%>
<%_ Object.keys(uniqueEnums).forEach(function(element) { _%>
import <%= packageName %>.domain.enumeration.<%= element %>;
<%_ }); _%>

/**
 * A DTO for the {@link <%= packageName %>.domain.<%= asEntity(entityClass) %>} entity.
 */
<%_ if (typeof javadoc !== 'undefined') { _%>
@ApiModel(description = "<%- formatAsApiDescription(javadoc) %>")
<%_ } _%>
public class <%= asDto(entityClass) %> implements Serializable {
<%_
// here we lie to the field_validators code because it was coded to expect fields[idx] to contain the validation info
const realFields = fields;
fields = pkData;
for (idx in fields) { _%>

    <%_ if (typeof fields[idx].javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(fields[idx].javadoc) %>
    <%_ }
    if (fields[idx].fieldValidateRules && fields[idx].fieldValidateRules.includes('required')) {
        required = true;
    }
    const fieldValidateRules = fields[idx].fieldValidateRules;
    const fieldValidateRulesMinlength = fields[idx].fieldValidateRulesMinlength;
    const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
    const fieldValidateRulesMinbytes = fields[idx].fieldValidateRulesMinbytes;
    const fieldValidateRulesMaxbytes = fields[idx].fieldValidateRulesMaxbytes;
    const fieldValidateRulesMin = fields[idx].fieldValidateRulesMin;
    const fieldValidateRulesMax = fields[idx].fieldValidateRulesMax;
    const fieldValidateRulesPatternJava = fields[idx].fieldValidateRulesPatternJava;
    _%>
    <%_ if (fieldValidateRules && fieldValidateRules.length > 0) { _%>
    <%- include ../../common/field_validators.ejs -%>
    <%_ } _%>
    <%_ if (typeof fields[idx].javadoc != 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(fields[idx].javadoc) %>"<% if (required) { %>, required = true<% } %>)
    <%_ } _%>
    private <%= fields[idx].type %> <%= fields[idx].name %>;
<%_
}
// we put back the real value of fields
fields = realFields; _%>
<%_ for (idx in fields) {
    if (!fields[idx].partOfId) { _%>

        <%_ if (typeof fields[idx].javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(fields[idx].javadoc) %>
        <%_ }
        let required = false;
        const fieldValidate = fields[idx].fieldValidate;
        const fieldValidateRules = fields[idx].fieldValidateRules;
        const fieldValidateRulesMinlength = fields[idx].fieldValidateRulesMinlength;
        const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
        const fieldValidateRulesMinbytes = fields[idx].fieldValidateRulesMinbytes;
        const fieldValidateRulesMaxbytes = fields[idx].fieldValidateRulesMaxbytes;
        const fieldValidateRulesMin = fields[idx].fieldValidateRulesMin;
        const fieldValidateRulesMax = fields[idx].fieldValidateRulesMax;
        const fieldValidateRulesPatternJava = fields[idx].fieldValidateRulesPatternJava;
        const fieldType = fields[idx].fieldType;
        const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
        const fieldName = fields[idx].fieldName; _%>
    <%_ if (fieldValidate === true) {
            if (fieldValidateRules.includes('required')) {
                required = true;
            } _%>
    <%- include ../../common/field_validators -%>
    <%_ } _%>
    <%_ if (typeof fields[idx].javadoc != 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(fields[idx].javadoc) %>"<% if (required) { %>, required = true<% } %>)
    <%_ } _%>
    <%_ if (fieldType === 'byte[]' && databaseType === 'sql') { _%>
    @Lob
    <%_ } _%>
    <%_ if (fieldTypeBlobContent !== 'text') { _%>
    private <%= fieldType %> <%= fieldName %>;
    <%_ } else { _%>
    private String <%= fieldName %>;
    <%_ } _%>
    <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>

    private String <%= fieldName %>ContentType;
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
<%_ for (idx in relationships) {
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const relationshipType = relationships[idx].relationshipType;
        const otherEntityName = relationships[idx].otherEntityName;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const ownerSide = relationships[idx].ownerSide;
        if (typeof relationships[idx].javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationships[idx].javadoc) %>
    @ApiModelProperty(value = "<%- formatAsApiDescription(relationships[idx].javadoc) %>")
    <%_ }
        if ((relationshipType === 'many-to-many' && ownerSide === true)
            || (relationshipType === 'one-to-many' && otherEntityIsEmbedded)) { _%>
    private Set<<%= asDto(otherEntityNameCapitalized) %>> <%= relationshipFieldNamePlural %> = new HashSet<>();
    <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true && otherEntityIsEmbedded) { _%>
    private <%= asDto(otherEntityNameCapitalized) %> <%= relationshipFieldName %>;
    <%_ } else if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
        <%_ if (relationshipFieldName === 'user' && authenticationType === 'oauth2') { _%>

    private String userId;
        <%_ } else { _%>
            <%_ relationships[idx].pkData.forEach(pk => { _%>
                <%_ if (!relationships[idx].partOfId) { _%>

    private <%= pk.type %> <%= relationships[idx].relationshipName %><%=pk.nameCapitalized %>;
                <%_ } _%>
                <%_ if (pk.otherEntityField && !relationships[idx].pkData.some( x => x.name === pk.otherEntityField)) { _%>

    private String <%= pk.formName %><%= _.upperFirst(pk.otherEntityField) %>;
                <%_ } _%>
            <%_ });_%>
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
<%_ pkData.forEach(pk => { _%>

    public <%= pk.type %> <%= pk.getter %>(){
        return this.<%= pk.name %>;
    }

    public void <%= pk.setter %>(<%= pk.type %> <%= pk.name %>){
        this.<%= pk.name %> = <%= pk.name %>;
    }
<%_ });_%>
<%_ for (idx in fields) {
    if (!fields[idx].partOfId) {
        const fieldType = fields[idx].fieldType;
        const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
        const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod;
        const fieldName = fields[idx].fieldName; _%>
        <%_ if (fieldTypeBlobContent !== 'text') { _%>

    public <%= fieldType %> <% if (fieldType.toLowerCase() === 'boolean') { %>is<% } else { %>get<%_ } _%><%= fieldInJavaBeanMethod %>() {
        <%_ } else { _%>

    public String get<%= fieldInJavaBeanMethod %>() {
        <%_ } _%>
        return <%= fieldName %>;
    }
        <%_ if (fieldTypeBlobContent !== 'text') { _%>

    public void set<%= fieldInJavaBeanMethod %>(<%= fieldType %> <%= fieldName %>) {
        <%_ } else { _%>

    public void set<%= fieldInJavaBeanMethod %>(String <%= fieldName %>) {
        <%_ } _%>
        this.<%= fieldName %> = <%= fieldName %>;
    }
        <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>

    public String get<%= fieldInJavaBeanMethod %>ContentType() {
        return <%= fieldName %>ContentType;
    }

    public void set<%= fieldInJavaBeanMethod %>ContentType(String <%= fieldName %>ContentType) {
        this.<%= fieldName %>ContentType = <%= fieldName %>ContentType;
    }
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
<%_ for (idx in relationships) {
        relationshipFieldName = relationships[idx].relationshipFieldName,
        relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural,
        otherEntityName = relationships[idx].otherEntityName,
        otherEntityNamePlural = relationships[idx].otherEntityNamePlural,
        otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded,
        relationshipType = relationships[idx].relationshipType,
        otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized,
        otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized,
        relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized,
        relationshipNameCapitalizedPlural = relationships[idx].relationshipNameCapitalizedPlural,
        ownerSide = relationships[idx].ownerSide;
        if ((relationshipType === 'many-to-many' && ownerSide === true)
                || (relationshipType === 'one-to-many' && otherEntityIsEmbedded)) { _%>

    public Set<<%= asDto(otherEntityNameCapitalized) %>> get<%= relationshipNameCapitalizedPlural %>() {
        return <%= relationshipFieldNamePlural %>;
    }

    public void set<%= relationshipNameCapitalizedPlural %>(Set<<%= asDto(otherEntityNameCapitalized) %>> <%= otherEntityNamePlural %>) {
        this.<%= relationshipFieldNamePlural %> = <%= otherEntityNamePlural %>;
    }
    <%_ } else if (relationshipType === 'one-to-one' && ownerSide === true && otherEntityIsEmbedded) { _%>

    public <%= asDto(otherEntityNameCapitalized) %> get<%= relationshipNameCapitalized %>() {
        return <%= relationshipFieldName %>;
    }

    public void set<%= relationshipNameCapitalized %>(<%= asDto(otherEntityNameCapitalized) %> <%= otherEntityName %>) {
        this.<%= relationshipFieldName %> = <%= otherEntityName %>;
    }
    <%_ } else if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
    <%_ if (relationshipNameCapitalized.length > 1) { _%>
        <%_ if (otherEntityName === 'user' && authenticationType === 'oauth2') { _%>

    public String getUserId() {
        return userId;
    }

    public void set<%= relationshipNameCapitalized %>Id(<% if (otherEntityName === 'user' && authenticationType === 'oauth2') { %>String<% } else { %><%= primaryKeyType %><% } %> <%= otherEntityName %>Id) {
        this.<%= relationshipFieldName %>Id = <%= otherEntityName %>Id;
    }
        <%_ } else { _%>
            <%_ relationships[idx].pkData.forEach(pk => { _%>
                <%_ if (!relationships[idx].partOfId) { _%>

    public <%= pk.type %> get<%= relationshipNameCapitalized %><%= pk.nameCapitalized %>() {
        return <%= relationshipFieldName %><%= pk.nameCapitalized %>;
    }

    public void set<%= relationshipNameCapitalized %><%= pk.nameCapitalized %>(<%= pk.type %> <%= relationshipFieldName %><%= pk.nameCapitalized %>) {
        this.<%= relationshipFieldName %><%= pk.nameCapitalized %> = <%= relationshipFieldName %><%= pk.nameCapitalized %>;
    }
                <%_ } _%>
                <%_ if (pk.otherEntityField && !relationships[idx].pkData.some( x => x.name === pk.otherEntityField)) { _%>

    public String get<%= _.upperFirst(pk.formName) %><%= _.upperFirst(pk.otherEntityField) %>() {
        return <%= pk.formName %><%= _.upperFirst(pk.otherEntityField) %>;
    }

    public void set<%= _.upperFirst(pk.formName) %><%= _.upperFirst(pk.otherEntityField) %>(String <%= pk.formName %><%= _.upperFirst(pk.otherEntityField) %>) {
        this.<%= pk.formName %><%= _.upperFirst(pk.otherEntityField) %> = <%= pk.formName %><%= _.upperFirst(pk.otherEntityField) %>;
    }
                <%_ } _%>
            <%_ }); _%>
        <%_ } _%>
    <%_ } else { // special case when the entity name has one character _%>
    public <%= primaryKeyType %> get<%= relationshipNameCapitalized.toLowerCase() %>Id() {
        return <%= relationshipFieldName %>Id;
    }

    public void set<%= relationshipNameCapitalized.toLowerCase() %>Id(<%= primaryKeyType %> <%= otherEntityName %>Id) {
        this.<%= relationshipFieldName %>Id = <%= otherEntityName %>Id;
    }
    <%_ } _%>
    <%_ } } _%>

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        <%_ if (!embedded) { _%>
        <%= asDto(entityClass) %> <%= asDto(entityInstance) %> = (<%= asDto(entityClass) %>) o;
        if (<%- pkData.map(f => `${asDto(entityInstance)}.${f.getter}() == null && ${f.getter}() == null`).join(' &&\n            ') %>){
            return false;
        }
        return <%- pkData.map(f => `Objects.equals(${f.getter}(), ${asDto(entityInstance)}.${f.getter}())`).join(' &&\n            ') %>;
        <%_ } else { _%>
        return false;
        <%_ } _%>
    }

    @Override
    public int hashCode() {
    <%_ if (!embedded) { _%>
        return Objects.hash(<%- pkData.map(f => f.name).join(', ') %>);
    <%_ } else { _%>
        return 31;
    <%_ } _%>
    }

    @Override
    public String toString() {
        return "<%= asDto(entityClass) %>{" +
            <%_ pkData.forEach(pk => {
                const isNumeric = ['integer', 'long', 'float', 'double', 'bigdecimal'].includes(pk.type.toLowerCase()); _%>
            ", <%= pk.name %>=<% if (! isNumeric) {%>'<% } %>" + <%= pk.getter %>() <% if (! isNumeric) { %>+ "'" <% } %>+
            <%_ }); _%>
            <%_ for (idx in fields) {
                const fieldName = fields[idx].fieldName;
                const fieldType = fields[idx].fieldType;
                const isNumeric = ['integer', 'long', 'float', 'double', 'bigdecimal'].includes(fieldType.toLowerCase());
                if(!fields[idx].partOfId) {_%>
            ", <%= fieldName %>=<% if (! isNumeric) { %>'<% } %>" + <% if (fieldType.toLowerCase() === 'boolean') { %>is<% } else { %>get<% } %><%= fields[idx].fieldInJavaBeanMethod %>() <% if (! isNumeric) { %>+ "'" <% } %>+
            <%_ }
            }_%>
            <%_ for (idx in relationships) {
                const relationshipFieldName = relationships[idx].relationshipFieldName;
                const relationshipType = relationships[idx].relationshipType;
                const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
                const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
                const relationshipNameCapitalizedPlural = relationships[idx].relationshipNameCapitalizedPlural;
                const otherEntityName = relationships[idx].otherEntityName;
                const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized;
                const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
                const ownerSide = relationships[idx].ownerSide; _%>
                <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
                    <%_ if (relationshipFieldName === 'user' && authenticationType === 'oauth2') { _%>
            ", userId='" + getUserId() + "'" +
                    <%_ } else { _%>
                        <%_ relationships[idx].pkData.forEach(pk => { _%>
                            <%_ if (!relationships[idx].partOfId) { _%>
            ", <%= relationshipFieldName + pk.nameCapitalized %>='" + get<%= relationshipNameCapitalized + pk.nameCapitalized %>() + "'" +
                            <%_ } _%>
                            <%_ if (pk.otherEntityField && !relationships[idx].pkData.some( x => x.name === pk.otherEntityField)) { _%>
            ", <%= pk.formName %><%= _.upperFirst(pk.otherEntityField) %>='" + get<%= _.upperFirst(pk.formName) %><%= _.upperFirst(pk.otherEntityField) %>() + "'" +
                            <%_ } _%>
                        <%_ }); _%>
                    <%_ } _%>
                <%_ } _%>
            <%_ } _%>
            "}";
    }
}
