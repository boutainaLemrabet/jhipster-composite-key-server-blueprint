<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const hasNestedCompositeKey = relationships.some(r => r.relationshipType === 'many-to-one' && r.pkData.length > 1);
_%>
package <%=packageName%>.service.mapper;

import <%=packageName%>.domain.*;
import <%=packageName%>.service.dto.<%= asDto(entityClass) %>;

import org.mapstruct.*;
<%_
// this is because mapstruct doen't use mappers even if present in uses AnnotationParam, using @context would require additional work in mapstruct: https://github.com/mapstruct/mapstruct/issues/938
if (hasNestedCompositeKey) { _%>
import org.springframework.beans.factory.annotation.Autowired;
<%_ } _%>

/**
 * Mapper for the entity {@link <%= asEntity(entityClass) %>} and its DTO {@link <%= asDto(entityClass) %>}.
 */
@Mapper(componentModel = "spring", uses = {<% var existingMappings = [];
var renMapAnotEnt = false; //Render Mapping Annotation during Entity to DTO conversion?
  for (idx in relationships) {
    if ((relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true)|| relationships[idx].relationshipType === 'many-to-one' ||(relationships[idx].relationshipType === 'one-to-one' && relationships[idx].ownerSide === true)){
      // if the entity is mapped twice, we should implement the mapping once
      if (!existingMappings.includes(relationships[idx].otherEntityNameCapitalized) && asEntity(relationships[idx].otherEntityNameCapitalized) !== asEntity(entityClass)) {
          existingMappings.push(relationships[idx].otherEntityNameCapitalized);
      } } } %><%= existingMappings.map(otherEntityNameCapitalized => otherEntityNameCapitalized + 'Mapper.class').join(', ') %>})
<%_ if (hasNestedCompositeKey) { _%>
public abstract class <%= entityClass %>Mapper implements EntityMapper<<%= asDto(entityClass) %>, <%= asEntity(entityClass) %>> {
<%_ } else { _%>
public interface <%= entityClass %>Mapper extends EntityMapper<<%= asDto(entityClass) %>, <%= asEntity(entityClass) %>> {
<%_ } _%>

<%_ if(hasNestedCompositeKey){
    relationships.filter(r => r.relationshipType === 'many-to-one' && r.pkData.length > 1).forEach(r => { _%>
    @Autowired
    <%= r.otherEntityNameCapitalized%>Mapper <%= r.otherEntityName%>Mapper;

<%_ }); _%>
<%_ } _%>
<%_ // entity -> DTO mapping
var renMapAnotEnt = false; //Render Mapping Annotation during Entity to DTO conversion?
if(pkData.length > 1) {
    renMapAnotEnt = true; _%>
    <%_ fields.filter(f => f.partOfId).forEach(f => { _%>
    @Mapping(source = "id.<%= f.fieldName %>", target = "<%= f.fieldName %>")
    <%_ })
} _%>
<%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const relationshipName = relationships[idx].relationshipName;
    const ownerSide = relationships[idx].ownerSide;
    if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) {
        renMapAnotEnt = true;
        relationships[idx].pkData.forEach(pk => {
            if(relationships[idx].partOfId) { _%>
    @Mapping(source = "id.<%= relationships[idx].relationshipFieldName %><%=pk.nameCapitalized%>", target = "<%= relationships[idx].relationshipFieldName %><%=pk.nameCapitalized%>")
            <%_ } else { _%>
    @Mapping(source = "<%= relationshipName %>.<%=pk.name%>", target = "<%= relationships[idx].relationshipFieldName %><%=pk.nameCapitalized%>")
            <%_ } _%>
            <%_ if (pk.otherEntityField && !relationships[idx].pkData.some( x => x.name === pk.otherEntityField)) { _%>
    @Mapping(source = "<%= pk.otherEntityFieldDTOSource %>", target = "<%= pk.formName %><%= _.upperFirst(pk.otherEntityField) %>")
            <%_ } _%>
        <%_ }) _%>
    <%_ } _%>
<%_ } _%>
    <%_ if (renMapAnotEnt === true) { _%>
    <% if (hasNestedCompositeKey) { %>public abstract <% } %><%= asDto(entityClass) %> toDto(<%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>);

    <%_ } _%>
<%_
// DTO -> entity mapping
var renMapAnotDto = false;  //Render Mapping Annotation during DTO to Entity conversion?
if(pkData.length > 1) {
    renMapAnotDto = true;
    fields.filter(f => f.partOfId).forEach(f => { _%>
    @Mapping(source = "<%= f.fieldName %>", target = "id.<%= f.fieldName %>")
<%_ })
}
// var hasOAuthUser = false; // if OAuthUser, use a String id in fromId() method
let primaryKeyType = pkType;
for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const relationshipName = relationships[idx].relationshipName;
    const otherEntityName = relationships[idx].otherEntityName;
    const relationshipNamePlural = relationships[idx].relationshipNamePlural;
    const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
    const ownerSide = relationships[idx].ownerSide;
    const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
    primaryKeyType = (isUsingMapsId === true && otherEntityName === 'user' && authenticationType === 'oauth2') ? 'String' : primaryKeyType;
    if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) {
        renMapAnotDto = true;
        relationships[idx].pkData.forEach(pk => {
            if(relationships[idx].partOfId) { _%>
    @Mapping(source = "<%= relationshipName %><%=pk.nameCapitalized%>", target = "id.<%= relationships[idx].relationshipFieldName %><%=pk.nameCapitalized %>")
            <%_ }
        });
        if (relationships[idx].pkData.length === 1) { _%>
    @Mapping(source = "<%= relationshipName %><%=relationships[idx].pkData[0].nameCapitalized%>", target = "<%= relationshipName %>")
        <%_ } else { _%>
    @Mapping(expression = "java(this.<%= relationships[idx].otherEntityName%>Mapper.fromId(new <%=packageName%>.domain.<%= relationships[idx].otherEntityNameCapitalized %>Id(<%= relationships[idx].pkData.map(pk => asDto(entityInstance) + '.get' + relationshipNameCapitalized + pk.nameCapitalized + '()').join(', ') %>)))", target = "<%= relationshipName %>")
        <%_ } _%>
    <%_ } else if (relationshipType === 'many-to-many' && ownerSide === false) { renMapAnotDto = true; _%>
    @Mapping(target = "<%= relationshipNamePlural %>", ignore = true)
    <%_ } else if (relationshipType === 'one-to-many') { renMapAnotDto = true; _%>
    @Mapping(target = "<%= relationshipNamePlural %>", ignore = true)
    <%_ } else if (relationshipType === 'one-to-one' && ownerSide === false) { renMapAnotDto = true; _%>
    @Mapping(target = "<%= relationshipName %>", ignore = true)
    <%_ } _%>
    <%_ if ((relationshipType === 'one-to-many' || relationshipType === 'many-to-many') && fluentMethods) {_%>
    @Mapping(target = "remove<%= relationshipNameCapitalized %>", ignore = true)
    <%_ } _%>
<%_ } _%>
    <%_ if (renMapAnotDto === true) { _%>
    <% if (hasNestedCompositeKey) { %>public abstract <% } %><%= asEntity(entityClass) %> toEntity(<%= asDto(entityClass)%> <%= asDto(entityInstance) %>);
    <%_ } _%>
    <%_ if (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase') { _%>

    <% if (hasNestedCompositeKey) { %>public <% } else {%>default <% } %><%= asEntity(entityClass) %> from<%= _.upperFirst(pkName) %>(<%= primaryKeyType %> <%= pkName %>) {
        if (<%= pkName %> == null) {
            return null;
        }
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %> = new <%= asEntity(entityClass) %>();
        <%= asEntity(entityInstance) %>.set<%= _.upperFirst(pkName) %>(<%= pkName %>);
        return <%= asEntity(entityInstance) %>;
    }
<%_ } _%>
}
